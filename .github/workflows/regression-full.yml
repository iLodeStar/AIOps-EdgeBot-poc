name: Full Regression Test

on:
  workflow_dispatch:

jobs:
  full-regression:
    runs-on: ubuntu-latest

    services:
      tsdb:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mothership
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d mothership"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=20

      loki:
        image: grafana/loki:2.9.4
        ports:
          - 3100:3100
        options: >-
          --health-cmd="wget -q -O- http://localhost:3100/ready || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq

      - name: Install Python deps (EdgeBot, Mothership, tests)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install pytest pytest-html pytest-cov requests psutil; fi
          pip install -r edge_node/requirements.txt
          pip install -r mothership/requirements.txt

      - name: Wait for Loki readiness
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:3100/ready >/dev/null; then
              echo "Loki ready"; exit 0
            fi
            echo "Waiting for Loki..."; sleep 2
          done
          echo "Loki did not become ready in time"; exit 1

      - name: Wait for TimescaleDB readiness
        env:
          PGPASSWORD: postgres
        run: |
          for i in {1..60}; do
            if psql "postgresql://postgres@localhost:5432/mothership" -U postgres -c "SELECT 1" >/dev/null 2>&1; then
              echo "TimescaleDB ready"; exit 0
            fi
            echo "Waiting for TimescaleDB..."; sleep 2
          done
          echo "TimescaleDB did not become ready in time"; exit 1

      - name: Enable TimescaleDB extension (optional)
        if: always()
        env:
          PGPASSWORD: postgres
        run: |
          psql "postgresql://postgres@localhost:5432/mothership" -U postgres -c "CREATE EXTENSION IF NOT EXISTS timescaledb;" || true

      - name: Run existing cross-phase E2E (EdgeBot → Mothership → Loki)
        env:
          PYTEST_ADDOPTS: "-q"
        run: |
          mkdir -p reports/e2e
          python -m pytest tests/e2e/test_cross_phase_integration.py \
            --junitxml=reports/e2e/junit-e2e.xml \
            --html=reports/e2e/report-e2e.html --self-contained-html \
            -v || true

      - name: Start Mothership with both sinks (TSDB + Loki)
        env:
          # Main DB connection (used by TimescaleDBWriter)
          MOTHERSHIP_DB_DSN: postgresql://postgres:postgres@localhost:5432/mothership
          MOTHERSHIP_LOG_LEVEL: INFO
          # Loki sink
          LOKI_ENABLED: "true"
          LOKI_URL: http://localhost:3100
          # TSDB sink defaults (not strictly needed for main writer, but keep consistent)
          TSDB_ENABLED: "true"
          TSDB_HOST: localhost
          TSDB_PORT: "5432"
          TSDB_DATABASE: mothership
          TSDB_USERNAME: postgres
          TSDB_PASSWORD: postgres
        run: |
          mkdir -p reports
          nohup bash -lc 'cd mothership && python -m app.server 2>&1 | tee ../reports/mothership-stdout.txt' &
          for i in {1..90}; do
            if curl -sf http://localhost:8443/healthz >/dev/null; then
              echo "Mothership healthy"; break
            fi
            echo "Waiting for Mothership..."; sleep 2
          done
          curl -sS http://localhost:8443/healthz | tee reports/healthz.json || true
          curl -sS http://localhost:8443/stats | tee reports/stats-before.json || true
          curl -sS http://localhost:8443/metrics | head -n 200 | tee reports/metrics-before.txt || true

      - name: Ingest test batch (verify redact/enrich + dual sinks)
        id: ingest
        run: |
          TEST_ID="regress-$(date +%s)"
          PAYLOAD=$(cat <<'JSON'
          {
            "messages": [
              {
                "timestamp": "2025-01-01T00:00:00Z",
                "type": "syslog",
                "message": "Full regression test via GitHub Actions",
                "hostname": "actions-runner",
                "severity": "info",
                "_internal": "should_be_dropped",
                "raw_message": "<14>Jan  1 00:00:00 actions app: Full regression test",
                "tags": {"component":"regression","path":"edge->mothership","channel":"ci"}
              }
            ]
          }
          JSON
          )
          echo "$PAYLOAD" | jq '.messages[0].message += " '"$TEST_ID"'"' > /tmp/payload.json
          echo "TEST_ID=$TEST_ID" >> $GITHUB_OUTPUT
          curl -sS -X POST http://localhost:8443/ingest \
            -H "Content-Type: application/json" \
            --data-binary @/tmp/payload.json | tee reports/ingest-response.json
          sleep 5

      - name: Validate Loki received the event
        if: always()
        env:
          TEST_ID: ${{ steps.ingest.outputs.TEST_ID }}
        run: |
          START_NS=$(( ( $(date +%s) - 300 ) * 1000000000 ))
          END_NS=$(( $(date +%s) * 1000000000 ))
          curl -sG "http://localhost:3100/loki/api/v1/query_range" \
            --data-urlencode "query={source=\"mothership\"} |= \"$TEST_ID\"" \
            --data-urlencode "start=$START_NS" \
            --data-urlencode "end=$END_NS" \
            --data-urlencode "limit=1000" | tee reports/loki-query.json

          # Ensure response is JSON; dump a snippet on failure
          if ! jq -e . >/dev/null 2>&1 < reports/loki-query.json; then
            echo "Non-JSON response from Loki:" >&2
            head -c 400 reports/loki-query.json >&2 || true
            exit 5
          fi

          MATCHES=$(jq --arg id "$TEST_ID" \
            '.data.result | map(.values | any(.[1]; contains($id))) | any' reports/loki-query.json)
          if [ "$MATCHES" != "true" ]; then
            echo "Loki did not return the test event"; exit 1
          fi

      - name: Validate TimescaleDB received the event
        if: always()
        env:
          PGPASSWORD: postgres
          TEST_ID: ${{ steps.ingest.outputs.TEST_ID }}
        run: |
          SQL="SELECT COUNT(*) FROM events WHERE data->>'message' LIKE '%' || '$TEST_ID' || '%';"
          psql "postgresql://postgres@localhost:5432/mothership" -U postgres -c "$SQL" | tee reports/tsdb-count.txt
          COUNT=$(psql -tA "postgresql://postgres@localhost:5432/mothership" -U postgres -c "$SQL")
          if [ "${COUNT:-0}" -lt 1 ]; then
            echo "TimescaleDB does not contain the test event"; exit 1
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-regression-reports
          path: |
            reports/**
            tests/e2e/**.py
          if-no-files-found: warn